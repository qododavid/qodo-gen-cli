name: 'Qodo Gen CLI Action'
description: 'Run Qodo Gen CLI agents with custom TOML and MCP configurations'
author: 'Qodo'

inputs:
  prompt:
    description: 'The prompt or command to run with Qodo'
    required: true
  model:
    description: 'Specify a custom model to use'
    required: false
  agentfile:
    description: 'Path to custom agent.toml file (defaults to the example agent.toml included with this action)'
    required: false
  key-value-pairs:
    description: 'Additional key-value pairs as JSON object or multiline string (e.g., {"key1": "value1", "key2": "value2"} or key1=value1 key2=value2)'
    required: false
  qodo-version:
    description: 'Version of @qodo/gen to install (defaults to 0.1.122)'
    required: false
    default: '0.1.128'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      shell: bash
      run: |
        # Install jq for JSON parsing
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi
        
        # Verify npx is available (should be installed with Node.js)
        if ! command -v npx &> /dev/null; then
          echo "Error: npx is not available. This should have been installed with Node.js."
          exit 1
        else
          echo "npx is available: $(npx --version)"
        fi
        
        # Install uv (which includes uvx)
        if ! command -v uvx &> /dev/null; then
          echo "Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH for all subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          # Add to PATH for the current step
          export PATH="$HOME/.local/bin:$PATH"
          # Verify installation
          if command -v uvx &> /dev/null; then
            echo "uvx is now available: $(uvx --version)"
          else
            echo "Error: Failed to install uvx"
            exit 1
          fi
        else
          echo "uvx is already available: $(uvx --version)"
        fi

    - name: Install Qodo CLI
      shell: bash
      run: |
        if [ "${{ inputs.qodo-version }}" = "latest" ]; then
          npm install -g @qodo/gen
        else
          npm install -g @qodo/gen@${{ inputs.qodo-version }}
        fi

    - name: Run Qodo Command
      shell: bash
      run: |
        # Build the command
        QODO_CMD="qodo --ci"
        
        # Add model if specified
        if [ ! -z "${{ inputs.model }}" ]; then
          QODO_CMD="$QODO_CMD --model=${{ inputs.model }}"
        fi
        
        # Add agentfile - use default if not specified
        if [ ! -z "${{ inputs.agentfile }}" ]; then
          QODO_CMD="$QODO_CMD --agent-file=${{ inputs.agentfile }}"
        else
          # Use default agentfile from action directory
          QODO_CMD="$QODO_CMD --agent-file=${{ github.action_path }}/examples/agent.toml"
        fi
        
        # Parse and add key-value pairs
        if [ ! -z "${{ inputs.key-value-pairs }}" ]; then
          # Check if input is JSON format
          if echo "${{ inputs.key-value-pairs }}" | jq -e . >/dev/null 2>&1; then
            # Parse JSON and convert to --set key=value format
            PAIRS=$(echo "${{ inputs.key-value-pairs }}" | jq -r 'to_entries | .[] | "--set \(.key)=\(.value)"' | tr '\n' ' ')
            QODO_CMD="$QODO_CMD $PAIRS"
          else
            # Assume it's in key=value format separated by spaces or newlines
            # Convert each key=value to --set key=value
            PAIRS=""
            while IFS= read -r line; do
              # Skip empty lines
              if [ ! -z "$line" ]; then
                # Check if line already starts with --set
                if [[ "$line" == --set* ]]; then
                  PAIRS="$PAIRS $line"
                else
                  PAIRS="$PAIRS --set $line"
                fi
              fi
            done <<< "${{ inputs.key-value-pairs }}"
            QODO_CMD="$QODO_CMD $PAIRS"
          fi
        fi
        
        # Add the prompt at the end
        QODO_CMD="$QODO_CMD \"${{ inputs.prompt }}\""
        
        # Echo the command for debugging
        echo "Running: $QODO_CMD"
        
        # Execute the command
        eval $QODO_CMD

branding:
  icon: 'cpu'
  color: 'blue'
